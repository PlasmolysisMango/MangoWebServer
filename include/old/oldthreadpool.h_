#ifndef THREADPOOL_H
#define THREADPOOL_H

#include <stdexcept>
#include <pthread.h>
#include <queue>
#include <vector>
#include "lock.h"
#include "global.h"

template<typename T>
class ThreadPool {
public:
    ThreadPool(MODE actor_mode, int thread_num = 8, int max_requests = 10000);
    ~ThreadPool() { }
    // 增加带状态任务
    bool append(T *request, int stat);
    // 增加任务
    bool append(T *request);

private:
    // 工作线程函数
    static void *worker(void *arg); 
    void run();

    MODE m_actor_mode; // IO模型
    int m_thread_num; // 线程数
    int m_max_requests; // 请求队列的最大容量
    std::vector<pthread_t> m_threads; // 线程池数组
    std::queue<T *> m_workqueue; // 请求队列
    Locker m_queuelocker; // 请求队列锁
    Sem m_queuestat; // 指示队列任务数量，为零时会阻塞
    
};

template<typename T>
ThreadPool<T>::ThreadPool(MODE actor_mode, int thread_num, int max_requests)
: m_actor_mode(actor_mode), m_thread_num(thread_num), m_max_requests(max_requests)
{
    m_threads.resize(m_thread_num);
    for (int i = 0; i < m_thread_num; ++i) {
        // pthread_create要求线程函数为静态成员函数
        // 非静态成员函数会默认传递this指针导致参数不匹配
        if (pthread_create(&m_threads[i], nullptr, worker, this) != 0) {
            throw std::runtime_error("pthread_create error");
        }
        if (pthread_detach(m_threads[i]) != 0) {
            throw std::runtime_error("pthread_detach error");
        }
    }
}

template <typename T> 
bool ThreadPool<T>::append(T *request, int stat)
{
    m_queuelocker.lock();
    // 请求数超出
    if (m_workqueue.size() >= m_max_requests) {
        m_queuelocker.unlock();
        return false;
    }
    request->m_state = stat;
    m_workqueue.push(request);
    m_queuelocker.unlock();
    // 工作队列状态增加一个待处理任务
    m_queuestat.post();
    return true;
}

template <typename T> 
bool ThreadPool<T>::append(T *request)
{
    m_queuelocker.lock();
    // 请求数超出
    if (m_workqueue.size() >= m_max_requests) {
        m_queuelocker.unlock();
        return false;
    }
    m_workqueue.push(request);
    m_queuelocker.unlock();
    // 工作队列状态增加一个待处理任务
    m_queuestat.post();
    return true;
}

template<typename T>
void *ThreadPool<T>::worker(void *arg) 
{
    // 采取此方式间接调用run函数是因为静态成员函数无法访问普通数据成员
    ThreadPool *pool = (ThreadPool *)arg;
    pool->run();
    return pool;
}

template<typename T>
void ThreadPool<T>::run() 
{
    while (true) {
        // 若无任务，则阻塞
        m_queuestat.wait();
        m_queuelocker.lock();
        if (m_workqueue.empty()) {
            m_queuelocker.unlock();
            continue;
        }
        T *request = m_workqueue.front();
        m_workqueue.pop();
        m_queuelocker.unlock();
        if (!request) 
            continue;
        if (m_actor_mode == PROACTOR) {
            request->process();
            // proactor逻辑，即由主线程完成了IO工作
        }
        else {
            // reactor逻辑，由工作线程各自完成IO

        }
    }
}

#endif





